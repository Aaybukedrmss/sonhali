@model dotnet_store.Models.Urun
@inject dotnet_store.Models.DataContext DataContext
@inject Microsoft.AspNetCore.Identity.SignInManager<dotnet_store.Models.AppUser> SignInManager
@inject Microsoft.AspNetCore.Identity.UserManager<dotnet_store.Models.AppUser> UserManager
@inject dotnet_store.Services.IProductImageService ProductImageService

@{
    ViewData["Title"] = Model.ProductName;
}

<!-- Global anti-forgery token for AJAX (used by favorite toggle) -->
<form method="post" style="display:none">
    @Html.AntiForgeryToken()
    <input type="hidden" value="1" />
    <!-- keep at least one input to ensure hidden input renders consistently across browsers -->
    <!-- end hidden af token form -->
    </form>


<div class="container-fluid py-5">
    <!-- Breadcrumb -->
    <nav aria-label="breadcrumb" class="mb-4">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="@Url.Action("Index", "Home")" class="text-decoration-none"><i class="fas fa-home"></i> Ana Sayfa</a></li>
            <li class="breadcrumb-item"><a href="@Url.Action("Index")" class="text-decoration-none">Ürünler</a></li>
            <li class="breadcrumb-item"><a href="@Url.Action("List")" class="text-decoration-none">@Model.TopMostCategoryNames</a></li>
            <li class="breadcrumb-item active" aria-current="page">@Model.ProductName</li>
        </ol>
    </nav>

    <div class="row">
        <!-- Ürün Görseli ve Galeri -->
        <div class="col-lg-6 mb-4">
            <div class="card border-0 shadow-sm">
                <div class="card-body p-0">
                    <div class="product-gallery">
                        <div class="main-image-container text-center p-4" style="background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);">
                            @{ var detailImgUrl = await ProductImageService.GetPrimaryImageUrlByIsbnAsync(Model.Isbn); }
                            @if (!string.IsNullOrWhiteSpace(detailImgUrl))
                            {
                                <img src="@detailImgUrl" alt="@Model.ProductName" style="max-height: 400px; width: 100%; object-fit: contain; display: block; margin: 0 auto;" onerror="this.style.display='none'" />
                            }
                        </div>
                        
                        <!-- Küçük görseller -->
                        <div class="thumbnail-images d-flex justify-content-center gap-2 p-3 border-top d-none">
                            <div class="thumbnail-item active" style="width: 80px; height: 80px; background: #f8f9fa; border: 2px solid #007bff; border-radius: 8px; cursor: pointer;"></div>
                            <div class="thumbnail-item" style="width: 80px; height: 80px; background: #f8f9fa; border: 2px solid #dee2e6; border-radius: 8px; cursor: pointer;"></div>
                            <div class="thumbnail-item" style="width: 80px; height: 80px; background: #f8f9fa; border: 2px solid #dee2e6; border-radius: 8px; cursor: pointer;"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Ürün Bilgileri -->
        <div class="col-lg-6">
            <div class="product-info">
                <!-- Ürün Başlığı ve Badge'ler -->
                <h1 class="h2 mb-3 fw-bold text-dark">@Model.ProductName</h1>
                
                <div class="mb-3">
                    <span class="badge bg-primary me-2 px-3 py-2">@Model.Marka</span>
                    <span class="badge bg-info me-2 px-3 py-2">@Model.MedyaTipi</span>
                </div>

                <!-- Fiyat ve Stok Durumu -->
                <div class="price-section mb-4">
                    <div class="d-flex align-items-center mb-2">
                        <h2 class="h1 text-success fw-bold mb-0 me-3">@Model.Fiyat.ToString("C")</h2>
                        @if (Model.TotalRating > 0)
                        {
                            <div class="rating d-flex align-items-center">
                                <div class="stars me-2">
                                    @for (int i = 1; i <= 5; i++)
                                    {
                                        if (i <= Model.TotalRating)
                                        {
                                            <i class="fas fa-star text-warning"></i>
                                        }
                                        else
                                        {
                                            <i class="far fa-star text-warning"></i>
                                        }
                                    }
                                </div>
                                <span class="text-muted">(@Model.TotalRating.ToString("F1"))</span>
                            </div>
                        }
                    </div>
                    
                    <div class="stock-status mb-3">
                        @if (Model.StockQuantity > 0)
                        {
                            <p class="text-success mb-0">
                                <i class="fas fa-check-circle me-2"></i>
                                <strong>Stokta mevcut</strong>
                            </p>
                        }
                        else
                        {
                            <p class="text-danger mb-0">
                                <i class="fas fa-times-circle me-2"></i>
                                <strong>Stokta yok</strong>
                            </p>
                        }
                    </div>
                </div>

                <!-- Satın Alma Butonları -->
                <div class="purchase-actions mb-4">
                    @if (Model.StockQuantity > 0)
                    {
                        <div class="d-grid gap-2">
                            <form asp-controller="Cart" asp-action="Add" method="post">
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="urunId" value="@Model.Id" />
                                <input type="hidden" name="quantity" value="1" />
                                <button type="submit" class="btn btn-primary btn-lg py-3 w-100">
                                    <i class="fas fa-shopping-cart me-2"></i>
                                    Sepete Ekle
                                </button>
                            </form>
                            
                        </div>
                    }
                    else
                    {
                        <div class="d-grid gap-2">
                            <button class="btn btn-secondary btn-lg py-3" disabled>
                                <i class="fas fa-times-circle me-2"></i>
                                Stokta Yok
                            </button>
                            <button class="btn btn-outline-secondary py-2">
                                <i class="fas fa-bell me-2"></i>
                                Stok Bildirimi Al
                            </button>
                        </div>
                    }
                    
                    <div class="action-buttons">
                        @{ 
                            var isFavMain = false; 
                            if (SignInManager.IsSignedIn(User))
                            {
                                var cu = await UserManager.GetUserAsync(User);
                                if (cu != null)
                                {
                                    isFavMain = DataContext.Favorites.Any(f => f.UserId == cu.Id && f.UrunId == Model.Id);
                                }
                            }
                        }
                        
                        @if (SignInManager.IsSignedIn(User))
                        {
                            <button type="button" class="btn btn-outline-primary product-detail-fav-toggle @(isFavMain ? "favorite-active" : "")" data-urun-id="@Model.Id">
                                @if (isFavMain)
                                {
                                    <i class="fas fa-heart me-2"></i><span>Favorilerde</span>
                                }
                                else
                                {
                                    <i class="far fa-heart me-2"></i><span>Favorilere Ekle</span>
                                }
                            </button>
                        }
                        else
                        {
                            <a href="/Account/Login" class="btn btn-outline-primary">
                                <i class="far fa-heart me-2"></i><span>Favorilere Ekle</span>
                            </a>
                        }
                        
                        <button id="shareButton" class="btn btn-outline-info" data-title="@Model.ProductName" data-text="@Model.Marka - @Model.ProductName">
                            <i class="fas fa-share-alt me-2"></i>
                            Paylaş
                        </button>
                    </div>
                </div>

                <!-- Hızlı Bilgiler -->
                <div class="quick-info mb-4">
                    <div class="row g-3">
                        <div class="col-6">
                            <div class="info-item p-3 bg-light rounded">
                                <small class="text-muted d-block">Yazar</small>
                                <strong>@Model.Yazar</strong>
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="info-item p-3 bg-light rounded">
                                <small class="text-muted d-block">Yayınevi</small>
                                <strong>@Model.Yayinevi</strong>
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="info-item p-3 bg-light rounded">
                                <small class="text-muted d-block">ISBN</small>
                                <strong>@Model.Isbn</strong>
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="info-item p-3 bg-light rounded">
                                <small class="text-muted d-block">Hazırlık Süresi</small>
                                <strong>@Model.LeadTimeHour saat</strong>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Detaylı Bilgiler -->
    <div class="row mt-5">
        <div class="col-12">
            <div class="card border-0 shadow-sm">
                <div class="card-header bg-white border-0">
                    <ul class="nav nav-tabs card-header-tabs" id="productTabs" role="tablist">
                        <li class="nav-item" role="presentation">
                            <button class="nav-link active" id="description-tab" data-bs-toggle="tab" data-bs-target="#description" type="button" role="tab">
                                <i class="fas fa-info-circle me-2"></i>Açıklama
                            </button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="specifications-tab" data-bs-toggle="tab" data-bs-target="#specifications" type="button" role="tab">
                                <i class="fas fa-list me-2"></i>Özellikler
                            </button>
                        </li>
                        @if (!string.IsNullOrEmpty(Model.Degerlendirmelerim))
                        {
                            <li class="nav-item" role="presentation">
                                <button class="nav-link" id="reviews-tab" data-bs-toggle="tab" data-bs-target="#reviews" type="button" role="tab">
                                    <i class="fas fa-star me-2"></i>Değerlendirmeler
                                </button>
                            </li>
                        }
                    </ul>
                </div>
                <div class="card-body">
                    <div class="tab-content" id="productTabsContent">
                        <!-- Açıklama Tab -->
                        <div class="tab-pane fade show active" id="description" role="tabpanel">
                            <div class="row">
                                <div class="col-md-8">
                                    <h5 class="mb-3">Ürün Açıklaması</h5>
                                    <p class="text-muted">@Model.FullDescription</p>
                                </div>
                                
                            </div>
                        </div>

                        <!-- Özellikler Tab -->
                        <div class="tab-pane fade" id="specifications" role="tabpanel">
                            <h5 class="mb-3">Teknik Özellikler</h5>
                            <div class="row">
                                <div class="col-md-6">
                                    <table class="table table-borderless">
                                        <tbody>
                                            <tr>
                                                <td class="fw-bold text-muted">Ürün Adı:</td>
                                                <td>@Model.ProductName</td>
                                            </tr>
                                            <tr>
                                                <td class="fw-bold text-muted">Yazar:</td>
                                                <td>@Model.Yazar</td>
                                            </tr>
                                            <tr>
                                                <td class="fw-bold text-muted">Yayınevi:</td>
                                                <td>@Model.Yayinevi</td>
                                            </tr>
                                            <tr>
                                                <td class="fw-bold text-muted">Marka:</td>
                                                <td>@Model.Marka</td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>
                                <div class="col-md-6">
                                    <table class="table table-borderless">
                                        <tbody>
                                            <tr>
                                                <td class="fw-bold text-muted">ISBN:</td>
                                                <td>@Model.Isbn</td>
                                            </tr>
                                            <tr>
                                                <td class="fw-bold text-muted">SKU:</td>
                                                <td>@Model.Sku</td>
                                            </tr>
                                            <tr>
                                                <td class="fw-bold text-muted">Medya Tipi:</td>
                                                <td>@Model.MedyaTipi</td>
                                            </tr>
                                            <tr>
                                                <td class="fw-bold text-muted">Kategori:</td>
                                                <td>@Model.TopMostCategoryNames</td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>

                        <!-- Değerlendirmeler Tab -->
                        @if (!string.IsNullOrEmpty(Model.Degerlendirmelerim))
                        {
                            <div class="tab-pane fade" id="reviews" role="tabpanel">
                                <h5 class="mb-3">Müşteri Değerlendirmeleri</h5>
                                <div class="review-item p-4 bg-light rounded">
                                    <div class="d-flex justify-content-between align-items-start mb-3">
                                        <div>
                                            <h6 class="mb-1">Müşteri Değerlendirmesi</h6>
                                            @if (Model.TotalRating > 0)
                                            {
                                                <div class="stars">
                                                    @for (int i = 1; i <= 5; i++)
                                                    {
                                                        if (i <= Model.TotalRating)
                                                        {
                                                            <i class="fas fa-star text-warning"></i>
                                                        }
                                                        else
                                                        {
                                                            <i class="far fa-star text-warning"></i>
                                                        }
                                                    }
                                                    <span class="ms-2 text-muted">(@Model.TotalRating.ToString("F1"))</span>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                    <p class="mb-0">@Model.Degerlendirmelerim</p>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Benzer Ürünler -->
    <div class="row mt-5">
        <div class="col-12">
            <h4 class="mb-4">
                <i class="fas fa-thumbs-up me-2 text-primary"></i>
                Benzer Ürünler
            </h4>
            @if (ViewBag.BenzerUrunler != null && ((List<dotnet_store.Models.Urun>)ViewBag.BenzerUrunler).Any())
            {
                <div class="row">
                    @foreach (var benzerUrun in (List<dotnet_store.Models.Urun>)ViewBag.BenzerUrunler)
                    {
                        <div class="col-xl-3 col-lg-4 col-md-6 col-sm-6 mb-4">
                            @await Html.PartialAsync("Partials/_UrunCard", benzerUrun)
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="text-center py-4">
                    <i class="fas fa-box-open fa-3x text-muted mb-3"></i>
                    <h5 class="text-muted">Benzer ürün bulunamadı</h5>
                    <p class="text-muted">Şu anda başka ürün bulunmuyor.</p>
                </div>
            }
        </div>
    </div>
</div>

<style>
    .product-gallery .main-image-container {
        border-radius: 12px 12px 0 0;
    }
    
    .thumbnail-item:hover {
        border-color: #007bff !important;
        transform: scale(1.05);
        transition: all 0.2s ease;
    }
    
    .info-item {
        transition: all 0.2s ease;
    }
    
    .info-item:hover {
        background-color: #e9ecef !important;
        transform: translateY(-2px);
    }
    
    .nav-tabs .nav-link {
        border: none;
        color: #3c2323;
        font-weight: 500;
    }
    
    .nav-tabs .nav-link.active {
        color: #f7c7ba;
        background: none;
        border-bottom: 3px solid #f7c7ba;
    }
    
    /* Move generic card styling to global and scope to product cards */
    .product-card {
        transition: all 0.3s ease;
        border: 1px solid #f7c7ba;
    }
    
    .product-card:hover {
        transform: translateY(-5px);
    }
    
    .btn {
        transition: all 0.2s ease;
    }
    
    .btn:hover {
        transform: translateY(-1px);
    }
    
    .favorite-active {
        background-color: #dc3545 !important;
        color: white !important;
        border-color: #dc3545 !important;
    }
    
    .favorite-active:hover {
        background-color: #c82333 !important;
        border-color: #bd2130 !important;
    }
    
    /* Favorileme ve Paylaş butonları için özel düzenleme */
    .action-buttons {
        display: flex;
        gap: 12px;
        margin-top: 1rem;
    }
    
    .action-buttons .btn {
        flex: 1 1 50%;
        min-height: 45px;
        font-weight: 500;
        transition: all 0.3s ease;
        width: 50%;
        max-width: none;
    }
    
    /* Favori butonu ve paylaş butonunun aynı genişlikte olması için */
    .action-buttons .btn-fav-toggle,
    .action-buttons .btn-outline-info {
        flex: 1 1 50%;
        width: 50%;
    }
    
    .action-buttons .btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.15);
    }
</style>

<script>
    // Thumbnail tıklama işlevi
    document.querySelectorAll('.thumbnail-item').forEach(item => {
        item.addEventListener('click', function() {
            // Aktif thumbnail'ı güncelle
            document.querySelectorAll('.thumbnail-item').forEach(t => {
                t.classList.remove('active');
                t.style.borderColor = '#dee2e6';
            });
            this.classList.add('active');
            this.style.borderColor = '#007bff';
        });
    });

    // Favorileme sistemi artık site.js tarafından yönetiliyor
    console.log('Detail sayfası script çalışıyor');
    
    // Gerçek favorileme sistemi
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Detail sayfası DOMContentLoaded çalışıyor');
        
        // Web Share API ile Paylaş butonu
        const shareBtn = document.getElementById('shareButton');
        if (shareBtn) {
            shareBtn.addEventListener('click', function(e) {
                e.preventDefault();
                const shareData = {
                    title: shareBtn.getAttribute('data-title') || document.title,
                    text: shareBtn.getAttribute('data-text') || '',
                    url: window.location.href
                };
                if (navigator.share) {
                    navigator.share(shareData).catch(err => console.warn('Paylaşım iptal/başarısız:', err));
                } else {
                    // Fallback: url kopyala
                    navigator.clipboard?.writeText(shareData.url).then(() => {
                        showNotification('🔗 Bağlantı panoya kopyalandı', 'info');
                    }).catch(() => {
                        prompt('Bu bağlantıyı kopyalayın:', shareData.url);
                    });
                }
            });
        }
        
        const favoriteButton = document.querySelector('.product-detail-fav-toggle');
        console.log('Favorileme butonu:', favoriteButton);
        
        if (favoriteButton) {
            favoriteButton.addEventListener('click', function(e) {
                e.preventDefault();
                e.stopPropagation();
                
                console.log('Favorileme butonu tıklandı');
                
                const urunId = favoriteButton.getAttribute('data-urun-id');
                console.log('UrunId:', urunId);
                
                if (!urunId) {
                    alert('Ürün ID bulunamadı!');
                    return;
                }
                
                // Butonu devre dışı bırak
                favoriteButton.disabled = true;
                const originalHTML = favoriteButton.innerHTML;
                favoriteButton.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i><span>İşleniyor...</span>';
                
                // Token'ı bul
                const tokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
                if (!tokenInput) {
                    alert('Güvenlik token\'ı bulunamadı!');
                    favoriteButton.disabled = false;
                    favoriteButton.innerHTML = originalHTML;
                    return;
                }
                
                const token = tokenInput.value;
                console.log('Token bulundu');
                
                // AJAX isteği
                fetch('/Favorite/ToggleAjax', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: `urunId=${encodeURIComponent(urunId)}&__RequestVerificationToken=${encodeURIComponent(token)}`
                })
                .then(response => {
                    console.log('Sunucu yanıtı:', response.status);
                    
                    if (!response.ok) {
                        if (response.status === 401) {
                            alert('Favorilere eklemek için giriş yapmalısınız!');
                            window.location.href = '/Account/Login';
                            return;
                        }
                        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('Sunucu verisi:', data);
                    
                    if (!data.success) {
                        throw new Error(data.error || 'Bilinmeyen hata');
                    }
                    
                    // Butonu güncelle
                    const icon = favoriteButton.querySelector('i');
                    const span = favoriteButton.querySelector('span');
                    
                    if (data.isFavorite) {
                        // Favoriye eklendi
                        if (icon) {
                            icon.className = 'fas fa-heart me-2';
                        }
                        favoriteButton.classList.add('favorite-active');
                        if (span) span.textContent = 'Favorilerde';
                        showNotification('❤️ Ürün favorilere eklendi!', 'success');
                    } else {
                        // Favoriden çıkarıldı
                        if (icon) {
                            icon.className = 'far fa-heart me-2';
                        }
                        favoriteButton.classList.remove('favorite-active');
                        if (span) span.textContent = 'Favorilere Ekle';
                        showNotification('💔 Ürün favorilerden çıkarıldı!', 'info');
                    }
                    
                    // Butonu tekrar aktif et
                    favoriteButton.disabled = false;
                })
                .catch(error => {
                    console.error('Favori işlemi hatası:', error);
                    showNotification('❌ Hata oluştu!', 'error');
                    
                    // Butonu tekrar aktif et
                    favoriteButton.disabled = false;
                    favoriteButton.innerHTML = originalHTML;
                });
            });
        }
    });
    
    // Bildirim gösterme fonksiyonu
    let lastNotification = 0;
    
    function showNotification(message, type) {
        const now = Date.now();
        
        // 3 saniye içinde tekrar bildirim gösterme
        if (now - lastNotification < 3000) {
            return;
        }
        
        lastNotification = now;
        
        // Mevcut bildirimleri kaldır
        const existing = document.querySelectorAll('.favorite-notification');
        existing.forEach(n => n.remove());
        
        // Yeni bildirim oluştur
        const notification = document.createElement('div');
        notification.className = 'favorite-notification';
        notification.textContent = message;
        
        // Tip'e göre stil belirle
        let bgColor, textColor;
        switch(type) {
            case 'success':
                bgColor = '#f6a7a1';
                textColor = 'white';
                break;
            case 'info':
                bgColor = '#f7c7ba';
                textColor = '#3c2323';
                break;
            case 'error':
                bgColor = '#dc3545';
                textColor = 'white';
                break;
            default:
                bgColor = '#f6a7a1';
                textColor = 'white';
        }
        
        // Stil
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background-color: ${bgColor};
            color: ${textColor};
            padding: 15px 20px;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.3);
            z-index: 9999;
            font-weight: 500;
            font-size: 14px;
            max-width: 300px;
            animation: slideInRight 0.3s ease-out;
        `;
        
        // Animasyon CSS'i ekle
        if (!document.querySelector('#notification-styles')) {
            const style = document.createElement('style');
            style.id = 'notification-styles';
            style.textContent = `
                @@keyframes slideInRight {
                    from {
                        transform: translateX(100%);
                        opacity: 0;
                    }
                    to {
                        transform: translateX(0);
                        opacity: 1;
                    }
                }
                @@keyframes slideOutRight {
                    from {
                        transform: translateX(0);
                        opacity: 1;
                    }
                    to {
                        transform: translateX(100%);
                        opacity: 0;
                    }
                }
            `;
            document.head.appendChild(style);
        }
        
        // Sayfaya ekle
        document.body.appendChild(notification);
        
        // 3 saniye sonra kaldır
        setTimeout(() => {
            notification.style.animation = 'slideOutRight 0.3s ease-out';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 300);
        }, 3000);
    }
</script>

<style>
    .product-detail-fav-toggle {
        transition: all 0.3s ease !important;
        color: #f6a7a1 !important;
    }
    
    .product-detail-fav-toggle:hover {
        background-color: #f6a7a1 !important;
        border-color: #f6a7a1 !important;
        color: white !important;
    }
    
    .favorite-active {
        background-color: #f6a7a1 !important;
        border-color: #f6a7a1 !important;
        color: white !important;
    }
    
    .favorite-active:hover {
        background-color: #e59892 !important;
        border-color: #e59892 !important;
    }
</style>

<script>
// Benzer ürünler için favorileme sistemi
document.addEventListener('DOMContentLoaded', function() {
    console.log('Detail sayfası benzer ürünler favorileme sistemi başlatılıyor');
    
    // Benzer ürünler favorileme butonlarını bul
    const similarProductButtons = document.querySelectorAll('.product-card-fav-toggle');
    console.log(`${similarProductButtons.length} benzer ürün favorileme butonu bulundu`);
    
    if (similarProductButtons.length === 0) {
        console.log('Hiç benzer ürün favorileme butonu bulunamadı');
        return;
    }
    
    similarProductButtons.forEach((button, index) => {
        console.log(`Benzer ürün buton ${index + 1}:`, button);
        
        // Event listener ekle
        button.addEventListener('click', function(event) {
            console.log('Benzer ürün favorileme butonu tıklandı!');
            
            event.preventDefault();
            event.stopPropagation();
            
            const urunId = button.getAttribute('data-urun-id');
            console.log('Benzer ürün UrunId:', urunId);
            
            if (!urunId) {
                console.error('Benzer ürün UrunId bulunamadı!');
                return;
            }
            
            // Butonu devre dışı bırak
            button.disabled = true;
            const originalHTML = button.innerHTML;
            button.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
            
            // Token'ı bul
            const tokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
            if (!tokenInput) {
                console.error('Anti-forgery token bulunamadı!');
                button.disabled = false;
                button.innerHTML = originalHTML;
                return;
            }
            
            const token = tokenInput.value;
            
            // AJAX isteği - timeout ile
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), 5000); // 5 saniye timeout
            
            fetch('/Favorite/ToggleAjax', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: `urunId=${encodeURIComponent(urunId)}&__RequestVerificationToken=${encodeURIComponent(token)}`,
                signal: controller.signal
            })
            .then(response => {
                clearTimeout(timeoutId); // Timeout'u temizle
                if (!response.ok) {
                    if (response.status === 401) {
                        showNotification('Favorilere eklemek için giriş yapmalısınız!', 'error');
                        setTimeout(() => {
                            window.location.href = '/Account/Login';
                        }, 2000);
                        return;
                    }
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                return response.json();
            })
            .then(data => {
                console.log('Benzer ürün sunucu yanıtı:', data);
                
                if (!data.success) {
                    throw new Error(data.error || 'Bilinmeyen hata');
                }
                
                // Butonu güncelle
                if (data.isFavorite) {
                    button.classList.add('favorite-active');
                    showNotification('❤️ Ürün favorilere eklendi!', 'success');
                } else {
                    button.classList.remove('favorite-active');
                    showNotification('💔 Ürün favorilerden çıkarıldı!', 'info');
                }
                
                // Butonu tekrar aktif et
                button.disabled = false;
            })
            .catch(error => {
                clearTimeout(timeoutId); // Timeout'u temizle
                console.error('Benzer ürün favori işlemi hatası:', error);
                
                if (error.name === 'AbortError') {
                    showNotification('⏱️ İşlem zaman aşımına uğradı!', 'error');
                } else {
                    showNotification('❌ Hata oluştu!', 'error');
                }
                
                // Butonu tekrar aktif et
                button.disabled = false;
                button.innerHTML = originalHTML;
            });
        });
        
        console.log(`Benzer ürün buton ${index + 1} için event listener eklendi`);
    });
    
    console.log('Tüm benzer ürün favorileme butonlarına event listener eklendi');
});
</script>


