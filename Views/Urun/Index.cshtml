@using dotnet_store.Models
@model List<Urun>

@{
    ViewData["Title"] = "√úr√ºn Listesi";
}

<div class="container mt-4">
    <h2 class="mb-4">√úr√ºn Listesi</h2>

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    @if (Model != null && Model.Any())
    {
        <div class="row">
            @foreach (var item in Model)
            {
                <div class="col-xl-3 col-lg-4 col-md-6 col-sm-6 mb-4">
                    @await Html.PartialAsync("Partials/_UrunCard", item)
                </div>
            }
        </div>
    }
    else
    {
        <div class="text-center py-5">
            <i class="fas fa-box-open fa-3x text-muted mb-3"></i>
            <h4 class="text-muted">√úr√ºn bulunamadƒ±</h4>
            <p class="text-muted">Hen√ºz hi√ß √ºr√ºn eklenmemi≈ü.</p>
        </div>
    }
</div>


@section Scripts {
    <script>
        // Bootstrap alert'lerini otomatik kapat - jQuery √ßakƒ±≈ümasƒ±nƒ± √∂nle
        document.addEventListener('DOMContentLoaded', function() {
            setTimeout(function() {
                const alerts = document.querySelectorAll('.alert');
                alerts.forEach(function(alert) {
                    if (alert.classList.contains('alert-dismissible')) {
                        const closeBtn = alert.querySelector('.btn-close');
                        if (closeBtn) {
                            closeBtn.click();
                        }
                    }
                });
            }, 5000);
        });
    </script>
}

<script>
// √úr√ºn index sayfasƒ± i√ßin favorileme sistemi
document.addEventListener('DOMContentLoaded', function() {
    console.log('√úr√ºn index sayfasƒ± favorileme sistemi ba≈ülatƒ±lƒ±yor');
    
    // √úr√ºn index favorileme butonlarƒ±nƒ± bul
    const indexProductButtons = document.querySelectorAll('.product-card-fav-toggle');
    console.log(`${indexProductButtons.length} √ºr√ºn index favorileme butonu bulundu`);
    
    if (indexProductButtons.length === 0) {
        console.log('Hi√ß √ºr√ºn index favorileme butonu bulunamadƒ±');
        return;
    }
    
    indexProductButtons.forEach((button, index) => {
        console.log(`√úr√ºn index buton ${index + 1}:`, button);
        
        // Event listener ekle
        button.addEventListener('click', function(event) {
            console.log('√úr√ºn index favorileme butonu tƒ±klandƒ±!');
            
            event.preventDefault();
            event.stopPropagation();
            
            const urunId = button.getAttribute('data-urun-id');
            console.log('√úr√ºn index UrunId:', urunId);
            
            if (!urunId) {
                console.error('√úr√ºn index UrunId bulunamadƒ±!');
                return;
            }
            
            // Butonu devre dƒ±≈üƒ± bƒ±rak
            button.disabled = true;
            const originalHTML = button.innerHTML;
            button.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
            
            // Token'ƒ± bul
            const tokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
            if (!tokenInput) {
                console.error('Anti-forgery token bulunamadƒ±!');
                button.disabled = false;
                button.innerHTML = originalHTML;
                return;
            }
            
            const token = tokenInput.value;
            
            // AJAX isteƒüi - timeout ile
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), 5000); // 5 saniye timeout
            
            fetch('/Favorite/ToggleAjax', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: `urunId=${encodeURIComponent(urunId)}&__RequestVerificationToken=${encodeURIComponent(token)}`,
                signal: controller.signal
            })
            .then(response => {
                clearTimeout(timeoutId); // Timeout'u temizle
                if (!response.ok) {
                    if (response.status === 401) {
                        showNotification('Favorilere eklemek i√ßin giri≈ü yapmalƒ±sƒ±nƒ±z!', 'error');
                        setTimeout(() => {
                            window.location.href = '/Account/Login';
                        }, 2000);
                        return;
                    }
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                return response.json();
            })
            .then(data => {
                console.log('√úr√ºn index sunucu yanƒ±tƒ±:', data);
                
                if (!data.success) {
                    throw new Error(data.error || 'Bilinmeyen hata');
                }
                
                // Butonu g√ºncelle
                if (data.isFavorite) {
                    button.classList.add('favorite-active');
                    showNotification('‚ù§Ô∏è √úr√ºn favorilere eklendi!', 'success');
                } else {
                    button.classList.remove('favorite-active');
                    showNotification('üíî √úr√ºn favorilerden √ßƒ±karƒ±ldƒ±!', 'info');
                }
                
                // Butonu tekrar aktif et
                button.disabled = false;
            })
            .catch(error => {
                clearTimeout(timeoutId); // Timeout'u temizle
                console.error('√úr√ºn index favori i≈ülemi hatasƒ±:', error);
                
                if (error.name === 'AbortError') {
                    showNotification('‚è±Ô∏è ƒ∞≈ülem zaman a≈üƒ±mƒ±na uƒüradƒ±!', 'error');
                } else {
                    showNotification('‚ùå Hata olu≈ütu!', 'error');
                }
                
                // Butonu tekrar aktif et
                button.disabled = false;
                button.innerHTML = originalHTML;
            });
        });
        
        console.log(`√úr√ºn index buton ${index + 1} i√ßin event listener eklendi`);
    });
    
    console.log('T√ºm √ºr√ºn index favorileme butonlarƒ±na event listener eklendi');
});
</script>