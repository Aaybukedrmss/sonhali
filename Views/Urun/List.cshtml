@using dotnet_store.Models
@model List<Urun>

@{
    ViewData["Title"] = "Ürün Listesi";
}



<div class="container mt-4">
    <h2 class="mb-4">Ürün Listesi</h2>
    @if (!string.IsNullOrWhiteSpace(ViewBag.Query as string))
    {
        <p class="text-muted">Arama: <strong>@(ViewBag.Query)</strong></p>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    <!-- Filtreleme Formu -->
    <div class="card mb-4">
        <div class="card-header">
            <h5 class="mb-0">Filtreler</h5>
        </div>
        <div class="card-body">
            <form method="get" action="@Url.Action("List")" class="row g-3">
                <div class="col-md-3">
                    <label for="q" class="form-label">Arama</label>
                    <input type="text" class="form-control" id="q" name="q" value="@Context.Request.Query["q"]" placeholder="Ürün, yazar, yayınevi, marka..." />
                </div>
                <div class="col-md-3">
                    <label for="kategori" class="form-label">Kategori</label>
                    <select class="form-select" id="kategori" name="kategori">
                        <option value="">Tüm Kategoriler</option>
                        @if (ViewBag.Kategoriler != null)
                        {
                            foreach (var kategori in ViewBag.Kategoriler)
                            {
                                var isSelected = Context.Request.Query["kategori"] == kategori;
                                <option value="@kategori" selected="@isSelected">@kategori</option>
                            }
                        }
                    </select>
                </div>
                
                <div class="col-md-3">
                    <label for="yayinevi" class="form-label">Yayınevi</label>
                    <select class="form-select" id="yayinevi" name="yayinevi">
                        <option value="">Tüm Yayınevleri</option>
                        @if (ViewBag.Yayinevleri != null)
                        {
                            foreach (var yayinevi in ViewBag.Yayinevleri)
                            {
                                var isSelected = Context.Request.Query["yayinevi"] == yayinevi;
                                <option value="@yayinevi" selected="@isSelected">@yayinevi</option>
                            }
                        }
                    </select>
                </div>
                
                <div class="col-md-3">
                    <label for="yazar" class="form-label">Yazar</label>
                    <select class="form-select" id="yazar" name="yazar">
                        <option value="">Tüm Yazarlar</option>
                        @if (ViewBag.Yazarlar != null)
                        {
                            foreach (var yazar in ViewBag.Yazarlar)
                            {
                                var isSelected = Context.Request.Query["yazar"] == yazar;
                                <option value="@yazar" selected="@isSelected">@yazar</option>
                            }
                        }
                    </select>
                </div>
                
                <div class="col-md-3">
                    <label for="marka" class="form-label">Marka</label>
                    <select class="form-select" id="marka" name="marka">
                        <option value="">Tüm Markalar</option>
                        @if (ViewBag.Markalar != null)
                        {
                            foreach (var marka in ViewBag.Markalar)
                            {
                                var isSelected = Context.Request.Query["marka"] == marka;
                                <option value="@marka" selected="@isSelected">@marka</option>
                            }
                        }
                    </select>
                </div>
                
                <div class="col-md-3">
                    <label for="minFiyat" class="form-label">Minimum Fiyat</label>
                    <input type="number" class="form-control" id="minFiyat" name="minFiyat" 
                           value="@Context.Request.Query["minFiyat"]" step="0.01" min="0">
                </div>
                
                <div class="col-md-3">
                    <label for="maxFiyat" class="form-label">Maksimum Fiyat</label>
                    <input type="number" class="form-control" id="maxFiyat" name="maxFiyat" 
                           value="@Context.Request.Query["maxFiyat"]" step="0.01" min="0">
                </div>
                
                <div class="col-md-3">
                    <label for="minRating" class="form-label">Minimum Değerlendirme</label>
                    <select class="form-select" id="minRating" name="minRating">
                        <option value="">Tüm Değerlendirmeler</option>
                        <option value="1" selected="@(Context.Request.Query["minRating"] == "1")">1+ Yıldız</option>
                        <option value="2" selected="@(Context.Request.Query["minRating"] == "2")">2+ Yıldız</option>
                        <option value="3" selected="@(Context.Request.Query["minRating"] == "3")">3+ Yıldız</option>
                        <option value="4" selected="@(Context.Request.Query["minRating"] == "4")">4+ Yıldız</option>
                        <option value="5" selected="@(Context.Request.Query["minRating"] == "5")">5 Yıldız</option>
                    </select>
                </div>
                
                <div class="col-md-3 d-flex align-items-end">
                    <div class="d-flex gap-2 w-100">
                        <button type="submit" class="btn btn-primary flex-fill">
                            <i class="fas fa-filter"></i> Filtrele
                        </button>
                        <a href="@Url.Action("List")" class="btn btn-outline-secondary">
                            <i class="fas fa-times"></i> Temizle
                        </a>
                    </div>
                </div>
            </form>
        </div>
    </div>

    <!-- Sonuç Bilgisi -->
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h5>@Model.Count ürün bulundu</h5>
    </div>

    <!-- Ürün Listesi -->
    @if (Model != null && Model.Any())
    {
        <div class="row">
            @foreach (var item in Model)
            {
                <div class="col-xl-3 col-lg-4 col-md-6 col-sm-6 mb-4">
                    @await Html.PartialAsync("Partials/_UrunCard", item)
                </div>
            }
        </div>
    }
    else
    {
        <div class="text-center py-5">
            <i class="fas fa-box-open fa-3x text-muted mb-3"></i>
            <h4 class="text-muted">Ürün bulunamadı</h4>
            <p class="text-muted">Seçtiğiniz filtrelere uygun ürün bulunamadı.</p>
            <a href="@Url.Action("List")" class="btn btn-primary">Filtreleri Temizle</a>
        </div>
    }
</div>

<style>
    .form-select, .form-control {
        border-radius: 8px;
    }
</style>

@section Scripts {
    <script>
        // Bootstrap alert'lerini otomatik kapat
        setTimeout(function() {
            $('.alert').alert('close');
        }, 5000);
    </script>
}

<script>
// Ürün listesi sayfası için favorileme sistemi
document.addEventListener('DOMContentLoaded', function() {
    console.log('Ürün listesi sayfası favorileme sistemi başlatılıyor');
    
    // Ürün listesi favorileme butonlarını bul
    const listProductButtons = document.querySelectorAll('.product-card-fav-toggle');
    console.log(`${listProductButtons.length} ürün listesi favorileme butonu bulundu`);
    
    if (listProductButtons.length === 0) {
        console.log('Hiç ürün listesi favorileme butonu bulunamadı');
        return;
    }
    
    listProductButtons.forEach((button, index) => {
        console.log(`Ürün listesi buton ${index + 1}:`, button);
        
        // Event listener ekle
        button.addEventListener('click', function(event) {
            console.log('Ürün listesi favorileme butonu tıklandı!');
            
            event.preventDefault();
            event.stopPropagation();
            
            const urunId = button.getAttribute('data-urun-id');
            console.log('Ürün listesi UrunId:', urunId);
            
            if (!urunId) {
                console.error('Ürün listesi UrunId bulunamadı!');
                return;
            }
            
            // Butonu devre dışı bırak
            button.disabled = true;
            const originalHTML = button.innerHTML;
            button.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
            
            // Token'ı bul
            const tokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
            if (!tokenInput) {
                console.error('Anti-forgery token bulunamadı!');
                button.disabled = false;
                button.innerHTML = originalHTML;
                return;
            }
            
            const token = tokenInput.value;
            
            // AJAX isteği - timeout ile
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), 5000); // 5 saniye timeout
            
            fetch('/Favorite/ToggleAjax', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: `urunId=${encodeURIComponent(urunId)}&__RequestVerificationToken=${encodeURIComponent(token)}`,
                signal: controller.signal
            })
            .then(response => {
                clearTimeout(timeoutId); // Timeout'u temizle
                if (!response.ok) {
                    if (response.status === 401) {
                        showNotification('Favorilere eklemek için giriş yapmalısınız!', 'error');
                        setTimeout(() => {
                            window.location.href = '/Account/Login';
                        }, 2000);
                        return;
                    }
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                return response.json();
            })
            .then(data => {
                console.log('Ürün listesi sunucu yanıtı:', data);
                
                if (!data.success) {
                    throw new Error(data.error || 'Bilinmeyen hata');
                }
                
                // Butonu güncelle
                if (data.isFavorite) {
                    button.classList.add('favorite-active');
                    showNotification('❤️ Ürün favorilere eklendi!', 'success');
                } else {
                    button.classList.remove('favorite-active');
                    showNotification('💔 Ürün favorilerden çıkarıldı!', 'info');
                }
                
                // Butonu tekrar aktif et
                button.disabled = false;
            })
            .catch(error => {
                clearTimeout(timeoutId); // Timeout'u temizle
                console.error('Ürün listesi favori işlemi hatası:', error);
                
                if (error.name === 'AbortError') {
                    showNotification('⏱️ İşlem zaman aşımına uğradı!', 'error');
                } else {
                    showNotification('❌ Hata oluştu!', 'error');
                }
                
                // Butonu tekrar aktif et
                button.disabled = false;
                button.innerHTML = originalHTML;
            });
        });
        
        console.log(`Ürün listesi buton ${index + 1} için event listener eklendi`);
    });
    
    console.log('Tüm ürün listesi favorileme butonlarına event listener eklendi');
});
</script>
