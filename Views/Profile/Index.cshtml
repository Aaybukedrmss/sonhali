@{
    ViewData["Title"] = "Profilim";
}

<div class="profile-page"><div class="profile-container" style="padding:0 0 0 0;">
    <div class="sidebar">
        <div class="sidebar-header">
            <h2>Merhaba,</h2>
            <h3 id="userFullName">@Html.Raw(System.Net.WebUtility.HtmlDecode((string)(ViewBag.FullName ?? "")))</h3>
        </div>
        <ul class="sidebar-menu">
            <li class="active"><a asp-controller="Profile" asp-action="Index"><i class="fas fa-user"></i>Üyelik Bilgilerim</a></li>
            <li><a asp-controller="Favorite" asp-action="Index"><i class="fas fa-list"></i>Favorilerim</a></li>
            <li>
                <form asp-controller="Account" asp-action="Logout" method="post" class="d-inline">
                    @Html.AntiForgeryToken()
                    <button class="link-as-button"><i class="fas fa-sign-out-alt"></i>Çıkış Yap</button>
                </form>
            </li>
        </ul>
    </div>

    <div class="main-content">
        <h1>Üyelik Bilgilerim</h1>
        <div class="tab-container">
            <div class="tabs">
                <div class="tab active" data-tab="personal-info">Kişisel Bilgilerim</div>
                <div class="tab" data-tab="password-change">Şifre Değişikliği</div>
                <div class="tab" data-tab="addresses">Adreslerim</div>
            </div>

            <div class="tab-content active" id="personal-info">
                @if(TempData["ProfileSuccess"] != null){<div class="alert alert-success">@TempData["ProfileSuccess"]</div>}
                @if(TempData["ProfileError"] != null){<div class="alert alert-danger">@TempData["ProfileError"]</div>}
                <form id="personalInfoForm" asp-action="Update" method="post">
                    @Html.AntiForgeryToken()
                    <div class="form-group">
                        <label for="firstName">Adınız</label>
                        <input type="text" id="firstName" name="FirstName" value="">
                    </div>
                    <div class="form-group">
                        <label for="lastName">Soyadınız</label>
                        <input type="text" id="lastName" name="LastName" value="">
                    </div>
                    <div class="form-group">
                        <label for="username">Kullanıcı Adı</label>
                        <input type="text" id="username" name="Username" value="">
                    </div>
                    <div class="form-group">
                        <label for="email">E-posta Adresi</label>
                        <input type="email" id="email" name="Email" value="">
                    </div>
                    <div class="form-group">
                        <label for="phone">Telefon Numarası</label>
                        <input type="tel" id="phone" name="Phone" placeholder="Telefon numaranızı girin">
                    </div>
                    <div class="checkbox-group">
                        <input class="marketingPermission" type="checkbox" id="marketingPermission" name="marketingPermission" checked>
                        <label for="marketingPermission">Shop.co Mağazacılık Pazarlama A.Ş tarafıma ticari elektronik ileti göndermesi için burada belirtilenlere iznim vardır.</label>
                    </div>
                    <button type="submit" class="bilgibutton">Bilgilerimi Güncelle</button>
                    <div class="success-message" id="personalInfoSuccess">Bilgileriniz başarıyla güncellendi!</div>
                    <div class="error-message" id="personalInfoError"></div>
                </form>
            </div>

            <div class="tab-content" id="password-change">
                <form id="passwordChangeForm">
                    <div class="form-group">
                        <label for="currentPassword">Mevcut Şifre</label>
                        <input type="password" id="currentPassword" name="currentPassword">
                    </div>
                    <div class="form-group">
                        <label for="newPassword">Yeni Şifre</label>
                        <input type="password" id="newPassword" name="newPassword">
                    </div>
                    <div class="form-group">
                        <label for="confirmPassword">Yeni Şifre Tekrar</label>
                        <input type="password" id="confirmPassword" name="confirmPassword">
                    </div>
                    <button type="submit" class="bilgibutton">Şifremi Değiştir</button>
                    <div class="success-message" id="passwordChangeSuccess">Şifreniz başarıyla değiştirildi!</div>
                    <div class="error-message" id="passwordChangeError"></div>
                </form>
            </div>

            <div class="tab-content" id="addresses">
                <form id="__afForm">@Html.AntiForgeryToken()</form>
                <div class="address-toolbar">
                    <h3>Adreslerim</h3>
                    <div class="address-toolbar-actions">
                        <button class="bilgibutton" id="addAddressBtn" type="button">Yeni Adres Ekle</button>
                    </div>
                </div>
                <div class="address-list" id="addressList"></div>
            </div>
        </div>
    </div>
    </div>
</div>

<!-- Adres Ekleme/Düzenleme Modalı -->
<div class="modal drawer" id="addressModal">
    <div class="modal-content">
        <div class="modal-header">
            <h3 id="addressModalTitle">Yeni Adres Ekle</h3>
            <button class="close-btn" id="closeAddressModal" type="button">&times;</button>
        </div>
        <form id="addressForm">
            <input type="hidden" id="addressId">
            <div class="form-group">
                <label for="addressTitle">Adres Başlığı</label>
                <input type="text" id="addressTitle" name="addressTitle" placeholder="Ev, İş, Aile vb." required>
            </div>
            <div class="form-row">
                <div class="form-group">
                    <label for="addressFirstName">Ad</label>
                    <input type="text" id="addressFirstName" name="addressFirstName" placeholder="Ad" required>
                </div>
                <div class="form-group">
                    <label for="addressLastName">Soyad</label>
                    <input type="text" id="addressLastName" name="addressLastName" placeholder="Soyad" required>
                </div>
            </div>
            <div class="form-group">
                <label for="addressPhone">Telefon</label>
                <input type="tel" id="addressPhone" name="addressPhone" placeholder="05xxxxxxxxx" required>
            </div>
            <div class="form-group">
                <label for="addressCity">İl</label>
                <select id="addressCity" name="addressCity" required>
                    <option value="">Seçiniz</option>
                    <option value="istanbul">İstanbul</option>
                    <option value="ankara">Ankara</option>
                    <option value="izmir">İzmir</option>
                </select>
            </div>
            <div class="form-group">
                <label for="addressDistrict">İlçe</label>
                <select id="addressDistrict" name="addressDistrict" required>
                    <option value="">Önce il seçiniz</option>
                </select>
            </div>
            <div class="form-group">
                <label for="addressNeighborhood">Mahalle</label>
                <input type="text" id="addressNeighborhood" name="addressNeighborhood" placeholder="Mahalle" required>
            </div>
            <div class="form-group">
                <label for="addressDetails">Adres Detayı</label>
                <textarea id="addressDetails" name="addressDetails" rows="3" placeholder="Cadde/Sokak, No, Daire, Kat, Posta kodu vb." required></textarea>
            </div>
            <div class="checkbox-group">
                <input type="checkbox" id="defaultAddress" name="defaultAddress">
                <label for="defaultAddress">Varsayılan adresim olarak ayarla</label>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" id="cancelAddress">Kapat</button>
                <button type="submit" class="btn" id="saveAddress">Kaydet</button>
                <button type="submit" class="btn btn-outline" id="saveAndNew">Kaydet ve Yeni Ekle</button>
            </div>
            <div class="success-message" id="addressSuccess"></div>
            <div class="error-message" id="addressError"></div>
        </form>
    </div>
</div>

<style>
    .profile-container{display:flex;gap:1rem;max-width:900px;margin:0 auto}
    @@media (max-width: 1200px){ .profile-container{max-width:820px} }
    @@media (max-width: 992px){ .profile-container{max-width:100%} }
    .profile-page .sidebar{width:270px;background:var(--surface);border:1px solid #f7c7ba;border-radius:.75rem;height:100%}
    .profile-page .sidebar-header{padding:1.25rem;border-bottom:1px solid #e9ecef}
    .profile-page .sidebar-menu{list-style:none;margin:0;padding:0}
    .profile-page .sidebar-menu li{border-bottom:1px solid #f1f3f5}
    .profile-page .sidebar-menu a,.profile-page .link-as-button{display:block;width:100%;text-align:left;padding:.875rem 1.25rem;text-decoration:none;color:#3c2323;background:transparent;border:0}
    .profile-page .sidebar-menu li.active a{background:#f7c7ba;color:#3c2323;font-weight:600}
    .profile-page .link-as-button{cursor:pointer}
    .profile-page .main-content{flex:1;background:var(--surface);border:1px solid #f7c7ba;border-radius:.75rem;padding:1.25rem}
    .profile-page .tabs{display:flex;gap:.5rem;margin-bottom:1rem}
    .profile-page .tab{padding:.5rem .75rem;border:1px solid #f7c7ba;border-radius:.5rem;cursor:pointer;color:#3c2323;background:transparent}
    .profile-page .tab.active{background:#f7c7ba;border-color:#f7c7ba;color:#3c2323}
    .profile-page .tab-content{display:none}
    .profile-page .tab-content.active{display:block}
    .profile-page .form-group{display:flex;flex-direction:column;margin-bottom:.75rem}
    .profile-page .checkbox-group{display:flex;gap:.5rem;align-items:flex-start;margin:.75rem 0}
    .profile-page .bilgibutton{background:var(--primary);color:#fff;border:0;border-radius:.5rem;padding:.5rem 1rem}
    .profile-page .success-message,.profile-page .error-message{display:none;margin-top:.5rem}

    .profile-page .modal{display:none;position:fixed;inset:0;align-items:center;justify-content:center;background:rgba(17,24,39,.45);backdrop-filter:saturate(140%) blur(2px);z-index:1060}
    .profile-page .modal.drawer{justify-content:flex-end}
    .profile-page .modal-content{background:var(--surface);border-radius:.75rem;width:600px;max-width:95%;box-shadow:0 12px 30px rgba(0,0,0,.18)}
    .profile-page .modal.drawer .modal-content{width:440px;max-width:92%;height:100vh;border-radius:0;border-left:1px solid #f7c7ba;transform:translateX(100%);transition:transform .25s ease;display:flex;flex-direction:column;will-change:transform}
    .profile-page .modal.open.drawer .modal-content{transform:translateX(0)}
    .profile-page .modal-header{position:sticky;top:0;z-index:1;display:flex;align-items:center;justify-content:space-between;padding:1rem 1.25rem;border-bottom:1px solid #edf2f7;background:linear-gradient(180deg,#ffffff 0%,#f8fafc 100%)}
    .profile-page .close-btn{border:0;background:#f1f5f9;color:#111827;border-radius:.5rem;width:36px;height:36px;display:inline-flex;align-items:center;justify-content:center;font-size:1.25rem;line-height:1;cursor:pointer;transition:background .15s}
    .profile-page .close-btn:hover{background:#e2e8f0}
    .profile-page .form-row{display:flex;gap:.75rem}
    .profile-page #addressForm{padding:1rem 1.25rem;overflow:auto;flex:1}
    .profile-page .modal-footer{position:sticky;bottom:0;display:flex;gap:.5rem;justify-content:flex-end;padding:0.75rem 1.25rem;background:#fff;border-top:1px solid #edf2f7}
    .profile-page .address-toolbar{display:flex;align-items:center;justify-content:space-between;margin:.5rem 0 1rem}
    .profile-page .address-toolbar h3{margin:0;font-size:1.1rem}
    .profile-page .address-toolbar-actions{display:flex;gap:.5rem;flex-wrap:wrap;justify-content:flex-end}

    .profile-page .address-list{display:grid;grid-template-columns:repeat(auto-fit,minmax(280px,1fr));gap:.75rem}
    .profile-page .address-list .address-item{border:1px solid #f7c7ba;border-radius:.75rem;padding:1rem;min-height:220px;background:var(--surface);box-shadow:0 1px 2px rgba(0,0,0,.04);transition:box-shadow .2s,border-color .2s}
    .profile-page .address-list .address-item:hover{box-shadow:0 4px 12px rgba(0,0,0,.08);border-color:#f7c7ba}
    .profile-page .address-actions{display:flex;gap:.5rem;justify-content:flex-end;flex-wrap:wrap;margin-top:.75rem}

    .profile-page .address-add-tile{display:flex;align-items:center;justify-content:center;min-height:220px;border:2px dashed #f7c7ba;border-radius:.75rem;background:var(--surface);color:#111827;cursor:pointer;transition:border-color .2s,background .2s}
    .profile-page .address-add-tile:hover{border-color:#f7c7ba;background:var(--surface)}
    .profile-page .address-add-tile .plus{font-size:1.5rem;margin-right:.5rem}

    .profile-page .bilgibutton.outline{background:transparent;color:#3c2323;border:1px solid #f7c7ba}
    .profile-page .btn{background:var(--primary);color:#fff;border:0;border-radius:.5rem;padding:.5rem .8rem;cursor:pointer}
    .profile-page .btn.btn-outline{background:transparent;color:#3c2323;border:1px solid #f7c7ba}
    .profile-page .btn.btn-secondary{background:#6b7280}
    .profile-page input[type="text"], .profile-page input[type="email"], .profile-page input[type="tel"], .profile-page select, .profile-page textarea{width:100%;border:1px solid #f7c7ba;border-radius:.5rem;padding:.6rem .7rem;transition:border-color .15s, box-shadow .15s;font-size:.95rem;background:var(--surface)}
    .profile-page input[type="text"]:focus, .profile-page input[type="email"]:focus, .profile-page input[type="tel"]:focus, .profile-page select:focus, .profile-page textarea:focus{outline:none;border-color:#f7c7ba;box-shadow:0 0 0 3px rgba(247,199,186,.25)}
    .profile-page .form-row .form-group{flex:1}
    .profile-page textarea{resize:vertical}
    .profile-page .checkbox-group input{margin-top:.25rem}
    .profile-page .modal-header h3{font-size:1.15rem;margin:0}
    .profile-page label{font-weight:600;margin-bottom:.25rem;color:#3c2323}
    .profile-page h4{display:flex;gap:.5rem;align-items:center;margin:0 0 .5rem 0}
    .profile-page .badge{display:inline-block;background:#f7c7ba;color:#3c2323;border-radius:1rem;padding:.1rem .5rem;font-size:.75rem}

    /* Compact adjustments */
    .profile-page .sidebar{width:240px}
    .profile-page .sidebar-header h2{font-size:1.1rem;margin-bottom:.25rem}
    .profile-page .sidebar-header h3{font-size:1rem}
    .profile-page .main-content{padding:.9rem}
    .profile-page h1{font-size:1.25rem}
    .profile-page .tabs{gap:.4rem}
    .profile-page .tab{padding:.4rem .6rem;font-size:.9rem}
    .profile-page label{font-size:.9rem}
    .profile-page input[type="text"], .profile-page input[type="tel"], .profile-page select, .profile-page textarea{padding:.5rem .6rem;font-size:.9rem}
    .profile-page .bilgibutton, .profile-page .btn{padding:.4rem .7rem;font-size:.9rem}
    .profile-page .address-list{gap:.6rem}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const tabs = document.querySelectorAll('.tab');
    tabs.forEach(tab => {
        tab.addEventListener('click', function() {
            document.querySelector('.tab.active').classList.remove('active');
            document.querySelector('.tab-content.active').classList.remove('active');
            this.classList.add('active');
            const tabId = this.getAttribute('data-tab');
            document.getElementById(tabId).classList.add('active');
        });
    });

    const cityDistricts = {
        'istanbul': ['Kadıköy','Beşiktaş','Şişli','Beyoğlu','Üsküdar','Fatih','Bakırköy','Bağcılar'],
        'ankara': ['Çankaya','Keçiören','Yenimahalle','Altındağ','Mamak','Etimesgut','Sincan'],
        'izmir': ['Konak','Karşıyaka','Bornova','Buca','Bayraklı','Çiğli','Gaziemir']
    };

    document.getElementById('addressCity').addEventListener('change', function(){
        const city = this.value;
        const districtSelect = document.getElementById('addressDistrict');
        districtSelect.innerHTML = '<option value="">Seçiniz</option>';
        if (city && cityDistricts[city]) {
            cityDistricts[city].forEach(d => {
                const option = document.createElement('option');
                option.value = d; option.textContent = d; districtSelect.appendChild(option);
            });
        }
    });

    function openModal(id){
        const el = document.getElementById(id);
        el.style.display='flex';
        requestAnimationFrame(()=>{ el.classList.add('open'); });
    }
    function closeModal(id){
        const el = document.getElementById(id);
        el.classList.remove('open');
        setTimeout(()=>{ el.style.display='none'; },250);
    }

    function openNewAddressModal(){
        document.getElementById('addressModalTitle').textContent='Yeni Adres Ekle';
        document.getElementById('addressForm').reset();
        document.getElementById('addressId').value='';
        openModal('addressModal');
        setTimeout(()=>document.getElementById('addressTitle').focus(),50);
    }
    document.getElementById('addAddressBtn').addEventListener('click', openNewAddressModal);
    document.getElementById('closeAddressModal').addEventListener('click', function(){ closeModal('addressModal'); });
    document.getElementById('cancelAddress').addEventListener('click', function(){ closeModal('addressModal'); });
    document.getElementById('addressModal').addEventListener('click', function(e){ if(e.target.id==='addressModal'){ closeModal('addressModal'); } });
    document.addEventListener('keydown', function(e){ if(e.key==='Escape'){ closeModal('addressModal'); } });

    function getRequestVerificationToken(){
        const f = document.querySelector('#__afForm input[name="__RequestVerificationToken"]');
        return f ? f.value : '';
    }

    async function fetchJson(url, options={}){
        const headers = options.headers || {};
        headers['Content-Type'] = 'application/json';
        const token = getRequestVerificationToken();
        if(token){ headers['RequestVerificationToken'] = token; }
        const resp = await fetch(url, { credentials: 'same-origin', ...options, headers });
        if(!resp.ok){ throw new Error(await resp.text()); }
        return resp.status === 204 ? null : resp.json();
    }

    async function loadUserData(){
        const userData = JSON.parse(localStorage.getItem('userData')) || {firstName:'', lastName:'', email:'', phone:'', marketingPermission:true};
        document.getElementById('firstName').value = userData.firstName;
        document.getElementById('lastName').value = userData.lastName;
        document.getElementById('username').value = '@User?.Identity?.Name';
        document.getElementById('email').value = userData.email;
        document.getElementById('phone').value = userData.phone;
        document.getElementById('marketingPermission').checked = userData.marketingPermission;
        const serverFullName = "@Html.Raw(System.Text.Encodings.Web.JavaScriptEncoder.Default.Encode(System.Net.WebUtility.HtmlDecode((string)(ViewBag.FullName ?? ""))))";
        const fullNameDisplay = `${userData.firstName || serverFullName} ${userData.lastName || ''}`.trim();
        document.getElementById('userFullName').textContent = fullNameDisplay;

        try{
            const addresses = await fetchJson('/Profile/Addresses');
            renderAddresses(addresses);
        }catch(err){
            document.getElementById('addressList').innerHTML = '<p>Adresler yüklenemedi.</p>';
        }
    }

    function renderAddresses(addresses){
        const addressList = document.getElementById('addressList');
        addressList.innerHTML='';
        if(addresses.length===0){ addressList.innerHTML='<p>Kayıtlı adres bulunmamaktadır.</p>'; }
        addresses.forEach((address)=>{
            const el = document.createElement('div');
            el.className='address-item';
            el.innerHTML = `
                <h4>${address.title} ${address.isDefault ? '<span class="badge">Varsayılan</span>' : ''}</h4>
                <p>${address.fullName}</p>
                <p>${address.phone}</p>
                <p>${address.city}, ${address.district}, ${address.neighborhood}</p>
                <p>${address.details}</p>
                <div class="address-actions">
                    <button class="btn btn-secondary edit-address" data-id="${address.id}">Düzenle</button>
                    <button class="btn btn-danger delete-address" data-id="${address.id}">Sil</button>
                    ${address.isDefault ? '' : `<button class="btn" data-default="${address.id}">Varsayılan Yap</button>`}
                </div>`;
            addressList.appendChild(el);
        });
        document.querySelectorAll('.edit-address').forEach(btn=>btn.addEventListener('click',function(){editAddress(this.getAttribute('data-id'));}));
        document.querySelectorAll('.delete-address').forEach(btn=>btn.addEventListener('click',function(){deleteAddress(this.getAttribute('data-id'));}));
        document.querySelectorAll('[data-default]').forEach(btn=>btn.addEventListener('click',function(){setDefault(this.getAttribute('data-default'));}));

        const addTile = document.createElement('button');
        addTile.type = 'button';
        addTile.className = 'address-add-tile';
        addTile.id = 'addressAddTile';
        addTile.innerHTML = '<span class="plus">+</span> Yeni Adres Ekle';
        addressList.appendChild(addTile);
        addTile.addEventListener('click', openNewAddressModal);
    }

    async function editAddress(id){
        const aEl = [...document.querySelectorAll('.edit-address')].find(b=>b.getAttribute('data-id')==id)?.closest('.address-item');
        let title = aEl?.querySelector('h4')?.textContent || '';
        title = title.replace('Varsayılan','').trim();
        const full = aEl?.querySelector('p')?.textContent || '';
        const [city, district, neighborhood] = (aEl?.querySelectorAll('p')[2]?.textContent || '').split(',').map(x=>x.trim());
        const details = (aEl?.querySelectorAll('p')[3]?.textContent || '').trim();
        document.getElementById('addressModalTitle').textContent='Adresi Düzenle';
        document.getElementById('addressId').value=id;
        document.getElementById('addressTitle').value=title;
        document.getElementById('addressFirstName').value=full.split(' ').slice(0,-1).join(' ');
        document.getElementById('addressLastName').value=full.split(' ').slice(-1).join(' ');
        document.getElementById('addressPhone').value=aEl?.querySelectorAll('p')[1]?.textContent || '';
        document.getElementById('addressCity').value=city?.toLowerCase();
        const districtSelect = document.getElementById('addressDistrict');
        districtSelect.innerHTML='<option value="">Seçiniz</option>';
        const cityVal = document.getElementById('addressCity').value;
        if(cityVal && cityDistricts[cityVal]){ cityDistricts[cityVal].forEach(d=>{ const o=document.createElement('option'); o.value=d;o.textContent=d;districtSelect.appendChild(o);}); }
        document.getElementById('addressDistrict').value=district;
        document.getElementById('addressNeighborhood').value=neighborhood;
        document.getElementById('addressDetails').value=details;
        document.getElementById('defaultAddress').checked=false;
        openModal('addressModal');
    }

    async function deleteAddress(id){
        if(!confirm('Bu adresi silmek istediğinize emin misiniz?')) return;
        try{
            await fetchJson(`/Profile/Address/${id}`, { method: 'DELETE' });
            const addresses = await fetchJson('/Profile/Addresses');
            renderAddresses(addresses);
        }catch(err){ alert('Silme işlemi başarısız.'); }
    }

    document.getElementById('addressForm').addEventListener('submit', function(e){
        e.preventDefault();
        const submitterId = e.submitter ? e.submitter.id : 'saveAddress';
        const id = document.getElementById('addressId').value;
        const isDefault = document.getElementById('defaultAddress').checked;
        const payload = {
            title: document.getElementById('addressTitle').value,
            fullName: (document.getElementById('addressFirstName').value + ' ' + document.getElementById('addressLastName').value).trim(),
            phone: document.getElementById('addressPhone').value,
            city: document.getElementById('addressCity').value,
            district: document.getElementById('addressDistrict').value,
            neighborhood: document.getElementById('addressNeighborhood').value,
            details: document.getElementById('addressDetails').value,
            isDefault
        };
        const method = id === '' ? 'POST' : 'PUT';
        const url = id === '' ? '/Profile/Address' : `/Profile/Address/${id}`;
        fetchJson(url, { method, body: JSON.stringify(payload) })
            .then(async _ => {
                const addresses = await fetchJson('/Profile/Addresses');
                renderAddresses(addresses);
                document.getElementById('addressSuccess').textContent='Adres başarıyla kaydedildi!';
                document.getElementById('addressSuccess').style.display='block';
                setTimeout(()=>document.getElementById('addressSuccess').style.display='none',3000);
                if(submitterId === 'saveAndNew'){
                    const keepDefault = document.getElementById('defaultAddress').checked;
                    document.getElementById('addressForm').reset();
                    document.getElementById('defaultAddress').checked = keepDefault;
                    setTimeout(()=>document.getElementById('addressTitle').focus(),50);
                } else {
                    document.getElementById('addressForm').reset();
                    closeModal('addressModal');
                }
            })
            .catch(_ => {
                document.getElementById('addressError').textContent='Adres kaydedilemedi!';
                document.getElementById('addressError').style.display='block';
                setTimeout(()=>document.getElementById('addressError').style.display='none',3000);
            });
    });

    async function setDefault(id){
        try{
            await fetchJson(`/Profile/SetDefaultAddress/${id}`, { method: 'POST' });
            const addresses = await fetchJson('/Profile/Addresses');
            renderAddresses(addresses);
        }catch(err){ alert('Varsayılan ayarlanamadı.'); }
    }

    document.getElementById('personalInfoForm').addEventListener('submit', function(e){
        // Sunucuya gönder; JS tarafı engellemesin
    });

    document.getElementById('passwordChangeForm').addEventListener('submit', function(e){
        e.preventDefault();
        const newPassword = document.getElementById('newPassword').value;
        const confirmPassword = document.getElementById('confirmPassword').value;
        if(newPassword !== confirmPassword){
            const err=document.getElementById('passwordChangeError'); err.textContent='Yeni şifreler eşleşmiyor!'; err.style.display='block'; setTimeout(()=>err.style.display='none',3000); return;
        }
        localStorage.setItem('userPassword', newPassword);
        this.reset();
        const s=document.getElementById('passwordChangeSuccess'); s.style.display='block'; setTimeout(()=>s.style.display='none',3000);
    });

    loadUserData();
});
</script>


