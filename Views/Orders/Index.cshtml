@model List<dotnet_store.Controllers.OrderListViewModel>


<div class="container">
    <h1>Siparişlerim</h1>
    <div class="d-flex gap-2 mb-3">
        <input type="text" class="form-control" placeholder="Ürün ismi veya marka ara">
        <a asp-controller="Home" asp-action="Index" class="btn btn-outline-secondary">Tüm Siparişler</a>
    </div>
    <div class="filters d-flex gap-2 mb-4">
        <button class="btn btn-primary active" data-status="All">Tümü</button>
        <button class="btn btn-outline-secondary" data-status="Pending">Devam Eden Siparişler</button>
        <button class="btn btn-outline-secondary" data-status="Paid">Tamamlanan</button>
        <button class="btn btn-outline-secondary" data-status="Cancelled">İptaller</button>
    </div>

    <!-- Desktop Table -->
    <div class="table-responsive d-none d-lg-block">
        <table class="table order-table table-hover">
        <thead>
            <tr>
                    <th style="width: 15%;">Sipariş Tarihi</th>
                    <th style="width: 35%;">Sipariş Özeti</th>
                    <th style="width: 15%;">Alıcı</th>
                    <th style="width: 10%;">Tutar</th>
                    <th style="width: 10%;">Durum</th>
                    <th style="width: 15%;">İşlemler</th>
            </tr>
        </thead>
        <tbody>
        @if (Model != null && Model.Any())
        {
            foreach (var o in Model)
            {
                <tr data-status="@o.Order.Status">
                        <td>
                            <div class="fw-bold">@o.Order.CreatedAt.ToLocalTime().ToString("dd.MM.yyyy")</div>
                            <small class="text-muted">@o.Order.CreatedAt.ToLocalTime().ToString("HH:mm")</small>
                        </td>
                        <td>
                            <div class="mb-2">
                                <strong>Sipariş No:</strong> <span class="text-primary">@o.Order.OrderNumber</span>
                            </div>
                            <div class="mb-2">
                                <strong>Kargo:</strong> @o.Order.ShippingProvider 
                                <span class="badge bg-secondary ms-1">@o.Order.ShippingCost.ToString("C")</span>
                            </div>
                            @if (o.Items.Any())
                            {
                                <div class="d-flex align-items-center gap-2">
                                    @{
                                        var first = o.Items.First();
                                    }
                                    @inject dotnet_store.Services.IProductImageService ImgSvc
                                    @{ var oimg = await ImgSvc.GetPrimaryImageUrlByIsbnAsync(first.Urun!.Isbn); }
                                    <div style="width:50px;height:50px;flex:0 0 50px;display:flex;align-items:center;justify-content:center;background:var(--surface);border:1px solid var(--secondary);border-radius:6px;">
                                        @if (!string.IsNullOrWhiteSpace(oimg))
                                        {
                                            <img src="@oimg" alt="@first.Urun!.ProductName" style="max-width:100%;max-height:100%;object-fit:contain;" />
                                        }
                                        else
                                        {
                                            <i class="fas fa-book text-muted"></i>
                                        }
                                    </div>
                                    <div class="small">
                                        <div class="fw-bold">@first.Urun!.ProductName</div>
                                        @if (o.Items.Count > 1)
                                        {
                                            <div class="text-muted">+@(o.Items.Count - 1) ürün daha</div>
                                        }
                                    </div>
                                </div>
                            }
                        </td>
                        <td>
                            <div class="fw-bold">@(o.Address?.FullName ?? "-")</div>
                            @if (o.Address != null)
                            {
                                <small class="text-muted">@o.Address.City</small>
                            }
                        </td>
                        <td>
                            <div class="fw-bold text-success fs-5">@o.Order.Total.ToString("C")</div>
                        </td>
                        <td>
                            @{
                                var statusClass = o.Order.Status switch
                                {
                                    "Pending" => "bg-warning",
                                    "Paid" => "bg-success", 
                                    "Cancelled" => "bg-danger",
                                    _ => "bg-secondary"
                                };
                                var statusText = o.Order.Status switch
                                {
                                    "Pending" => "Beklemede",
                                    "Paid" => "Tamamlandı",
                                    "Cancelled" => "İptal",
                                    _ => o.Order.Status
                                };
                            }
                            <span class="badge @statusClass">@statusText</span>
                        </td>
                        <td>
                            <a asp-controller="Orders" asp-action="Details" asp-route-orderNumber="@o.Order.OrderNumber" class="btn btn-outline-primary btn-sm">
                                <i class="fas fa-eye me-1"></i>Detay
                            </a>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="6" class="text-center py-5">
                        <i class="fas fa-shopping-bag fa-3x text-muted mb-3"></i>
                        <div class="text-muted">Henüz siparişiniz yok.</div>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </div>

    <!-- Mobile Cards -->
    <div class="d-lg-none">
        @if (Model != null && Model.Any())
        {
            foreach (var o in Model)
            {
                <div class="card mb-3 order-card" data-status="@o.Order.Status">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-start mb-3">
                            <div>
                                <h6 class="card-title mb-1">Sipariş #@o.Order.OrderNumber</h6>
                                <small class="text-muted">@o.Order.CreatedAt.ToLocalTime().ToString("dd.MM.yyyy HH:mm")</small>
                            </div>
                            <div class="text-end">
                                <div class="fw-bold text-success fs-5">@o.Order.Total.ToString("C")</div>
                                @{
                                    var statusClass = o.Order.Status switch
                                    {
                                        "Pending" => "bg-warning",
                                        "Paid" => "bg-success", 
                                        "Cancelled" => "bg-danger",
                                        _ => "bg-secondary"
                                    };
                                    var statusText = o.Order.Status switch
                                    {
                                        "Pending" => "Beklemede",
                                        "Paid" => "Tamamlandı",
                                        "Cancelled" => "İptal",
                                        _ => o.Order.Status
                                    };
                                }
                                <span class="badge @statusClass">@statusText</span>
                            </div>
                        </div>
                        
                        @if (o.Items.Any())
                        {
                            <div class="d-flex align-items-center gap-3 mb-3">
                                @{
                                    var first = o.Items.First();
                                }
                                @inject dotnet_store.Services.IProductImageService ImgSvc
                                @{ var oimg = await ImgSvc.GetPrimaryImageUrlByIsbnAsync(first.Urun!.Isbn); }
                                <div style="width:60px;height:60px;flex:0 0 60px;display:flex;align-items:center;justify-content:center;background:var(--surface);border:1px solid var(--secondary);border-radius:8px;">
                                    @if (!string.IsNullOrWhiteSpace(oimg))
                                    {
                                        <img src="@oimg" alt="@first.Urun!.ProductName" style="max-width:100%;max-height:100%;object-fit:contain;" />
                                    }
                                    else
                                    {
                                        <i class="fas fa-book text-muted fa-lg"></i>
                                    }
                                </div>
                                <div class="flex-grow-1">
                                    <div class="fw-bold">@first.Urun!.ProductName</div>
                                    @if (o.Items.Count > 1)
                                    {
                                        <small class="text-muted">+@(o.Items.Count - 1) ürün daha</small>
                                    }
                                </div>
                            </div>
                        }
                        
                        <div class="row text-center">
                            <div class="col-6">
                                <div class="small text-muted">Alıcı</div>
                                <div class="fw-bold">@(o.Address?.FullName ?? "-")</div>
                            </div>
                            <div class="col-6">
                                <div class="small text-muted">Kargo</div>
                                <div class="fw-bold">@o.Order.ShippingProvider</div>
                            </div>
                        </div>
                        
                        <div class="text-center mt-3">
                            <a asp-controller="Orders" asp-action="Details" asp-route-orderNumber="@o.Order.OrderNumber" class="btn btn-primary">
                                <i class="fas fa-eye me-1"></i>Sipariş Detayı
                            </a>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="text-center py-5">
                <i class="fas fa-shopping-bag fa-3x text-muted mb-3"></i>
                <div class="text-muted">Henüz siparişiniz yok.</div>
            </div>
        }
    </div>
</div>

<style>
    .order-table {
        font-size: 0.95rem;
    }
    
    .order-table thead th { 
        font-weight: 600; 
        background-color: var(--surface);
        border-bottom: 2px solid var(--secondary);
        padding: 1rem 0.75rem;
    }
    
    .order-table tbody td {
        padding: 1rem 0.75rem;
        vertical-align: middle;
        border-bottom: 1px solid var(--secondary);
    }
    
    .order-table tbody tr:hover {
        background-color: rgba(246, 167, 161, 0.05);
    }
    
    .order-card {
        border: 1px solid var(--secondary);
        border-radius: 12px;
        transition: all 0.3s ease;
    }
    
    .order-card:hover {
        box-shadow: 0 4px 12px rgba(246, 167, 161, 0.15);
        transform: translateY(-2px);
    }
    
    .order-card .card-body {
        padding: 1.5rem;
    }
    
    .badge {
        font-size: 0.75rem;
        padding: 0.5rem 0.75rem;
    }
    
    .btn-sm {
        padding: 0.5rem 1rem;
        font-size: 0.875rem;
    }
    
    /* Responsive adjustments */
    @@media (max-width: 1200px) {
        .order-table {
            font-size: 0.9rem;
        }
        
        .order-table thead th,
        .order-table tbody td {
            padding: 0.75rem 0.5rem;
        }
    }
    
    @@media (max-width: 992px) {
        .filters {
            flex-wrap: wrap;
            gap: 0.5rem;
        }
        
        .filters .btn {
            flex: 1;
            min-width: 120px;
        }
    }
    
    @@media (max-width: 576px) {
        .container {
            padding: 0 1rem;
        }
        
        .order-card .card-body {
            padding: 1rem;
        }
        
        .filters .btn {
            font-size: 0.875rem;
            padding: 0.5rem 0.75rem;
        }
    }
</style>

<script>
    (function(){
        console.log('Sipariş filtreleme sistemi başlatılıyor...');
        
        const buttons = document.querySelectorAll('.filters [data-status]');
        console.log(`${buttons.length} filtre butonu bulundu`);
        
        buttons.forEach((btn, index) => {
            console.log(`Buton ${index + 1}: ${btn.textContent} - Status: ${btn.dataset.status}`);
            
            btn.addEventListener('click', function(){
                console.log(`Filtre tıklandı: ${this.textContent} (${this.dataset.status})`);
                
                // Button states
                buttons.forEach(b => {
                    b.classList.remove('btn-primary','active');
                    b.classList.add('btn-outline-secondary');
                });
                this.classList.remove('btn-outline-secondary');
                this.classList.add('btn-primary','active');
                
                const status = this.dataset.status;
                console.log(`Filtreleme yapılıyor: ${status}`);
                
                // Filter desktop table rows
                const tableRows = document.querySelectorAll('.order-table tbody tr');
                console.log(`${tableRows.length} tablo satırı bulundu`);
                
                let visibleTableRows = 0;
                tableRows.forEach((row, index) => {
                    const rowStatus = row.dataset.status;
                    console.log(`Satır ${index + 1}: Status = ${rowStatus}`);
                    
                    if (status === 'All' || rowStatus === status) {
                        row.style.display = '';
                        visibleTableRows++;
                        console.log(`Satır ${index + 1} gösteriliyor`);
                    } else {
                        row.style.display = 'none';
                        console.log(`Satır ${index + 1} gizleniyor`);
                    }
                });
                
                // Filter mobile cards
                const mobileCards = document.querySelectorAll('.order-card');
                console.log(`${mobileCards.length} mobil kart bulundu`);
                
                let visibleMobileCards = 0;
                mobileCards.forEach((card, index) => {
                    const cardStatus = card.dataset.status;
                    console.log(`Kart ${index + 1}: Status = ${cardStatus}`);
                    
                    if (status === 'All' || cardStatus === status) {
                        card.style.display = '';
                        visibleMobileCards++;
                        console.log(`Kart ${index + 1} gösteriliyor`);
                    } else {
                        card.style.display = 'none';
                        console.log(`Kart ${index + 1} gizleniyor`);
                    }
                });
                
                console.log(`Filtreleme tamamlandı: ${visibleTableRows} tablo satırı, ${visibleMobileCards} mobil kart görünür`);
            });
        });
        
        // Search functionality
        const searchInput = document.querySelector('input[placeholder="Ürün ismi veya marka ara"]');
        if (searchInput) {
            console.log('Arama fonksiyonu başlatılıyor...');
            searchInput.addEventListener('input', function() {
                const searchTerm = this.value.toLowerCase();
                console.log(`Arama terimi: "${searchTerm}"`);
                
                // Search in desktop table
                document.querySelectorAll('.order-table tbody tr').forEach(row => {
                    const text = row.textContent.toLowerCase();
                    if (text.includes(searchTerm)) {
                        row.style.display = '';
                    } else {
                        row.style.display = 'none';
                    }
                });
                
                // Search in mobile cards
                document.querySelectorAll('.order-card').forEach(card => {
                    const text = card.textContent.toLowerCase();
                    if (text.includes(searchTerm)) {
                        card.style.display = '';
                    } else {
                        card.style.display = 'none';
                    }
                });
            });
        } else {
            console.log('Arama inputu bulunamadı');
        }
        
        console.log('Sipariş filtreleme sistemi başlatıldı');
    })();
</script>


